/*
 * Copyright 2012-2014 One Platform Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'maven'
apply plugin: 'signing'

uploadArchives.doFirst {
    print '------------------  ' + project.name + ' '
    if (isReleaseBuild()) {
        print 'RELEASE'
    } else if (!useTestRepo()) {
        print 'SNAPSHOT'
    } else {
        print 'LOCAL'
    }
    println ' BUILD  ------------------'
}

def getMavenRepositoryUrl() {
    if (isReleaseBuild()) {
        return RELEASE_REPOSITORY_URL
    } else if (!useTestRepo()) {
        return SNAPSHOT_REPOSITORY_URL
    } else {
        Properties defaultProperties = new Properties();
        defaultProperties.put('localrepo', System.getProperty('user.home') + "/onepf-mvn")

        Properties properties = new Properties(defaultProperties);
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def localRepositoryUrl = properties.getProperty('localrepo');

        if (!localRepositoryUrl.startsWith("file:///")) {
            localRepositoryUrl = "file:///" + localRepositoryUrl
        }
        return localRepositoryUrl
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext."signing.keyId" = localProperties.getProperty('signing.keyId')
            ext."signing.secretKeyRingFile" = localProperties.getProperty('signing.secretKeyRingFile')
            ext."signing.password" = localProperties.getProperty('signing.password')
        }
    }
}


afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.artifactId = POM_ARTIFACT_ID

                if (useTestRepo()) {
                    repository(url: getMavenRepositoryUrl())
                } else {

                    Properties localProperties = new Properties()
                    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
                    repository(url: getMavenRepositoryUrl()) {
                        authentication(
                                userName: localProperties.getProperty('nexusUsername'),
                                password: localProperties.getProperty('nexusPassword')
                        )
                    }
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    version VERSION_NAME
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    repositories {
                        repository {
                            id 'onepf-repo'
                            name 'OnePF Repository'
                            url 'https://raw.githubusercontent.com/onepf/OPF-mvn-repo/master/'
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.sourceFiles
    }

    task androidJavadocsJar(type: Jar) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        //basename = artifact_id
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives packageReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
